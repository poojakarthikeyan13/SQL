SQL:
====
->SQL stands for Structured Query Language
->SQL lets you access and manipulate databases

RDBMS:
======
RDBMS stands for Relational Database Management System.

->RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.

->The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.

Some of The Most Important SQL Commands:
=======================================
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

The SQL SELECT Statement:
=========================
->The SELECT statement is used to select data from a database.
->The data returned is stored in a result table, called the result-set.
SELECT Syntax:
--------------
1)SELECT column1, column2, ...
FROM table_name;
2)SELECT * FROM table_name; -> selects entire table

The SQL SELECT DISTINCT Statement:
---------------------------------
The SELECT DISTINCT statement is used to return only distinct (different) values.

Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.

SELECT DISTINCT Syntax:
-----------------------
SELECT DISTINCT column1, column2, ...
FROM table_name;
example:
-------
SELECT COUNT(DISTINCT Country) FROM Customers;->returns the count of distinct countries present in the table.

The SQL WHERE Clause:
=====================
The WHERE clause is used to filter records.
The WHERE clause is used to extract only those records that fulfill a specified condition.
Note: The WHERE clause is not only used in SELECT statement, it is also used in UPDATE, DELETE statement, etc.!
WHERE Syntax:
-------------
SELECT column1, column2, ...
FROM table_name
WHERE condition;

OPERATORS USED:
--------------
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column

The SQL AND, OR and NOT Operators:
=================================
The WHERE clause can be combined with AND, OR, and NOT operators.
The AND and OR operators are used to filter records based on more than one condition:

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

AND Syntax:
-----------
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

OR Syntax:
----------
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

NOT Syntax:
-----------
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

The SQL ORDER BY Keyword:
========================
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

ORDER BY Syntax:
---------------
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

The SQL INSERT INTO Statement:
=============================
The INSERT INTO statement is used to insert new records in a table.

INSERT INTO Syntax:
------------------
It is possible to write the INSERT INTO statement in two ways.

1)The first way specifies both the column names and the values to be inserted:
-----------------------------------------------------------------------------
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
->Here if you leave any column for that column null will be added.

2)If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. The INSERT INTO syntax would be as follows:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO table_name
VALUES (value1, value2, value3, ...);

The IS NULL Operator
The IS NULL operator is used to test for empty values (NULL values).

The following SQL lists all customers with a NULL value in the "Address" field:

Example:
--------
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;
Tip: Always use IS NULL to look for NULL values.

NULL Value:
===========

A field with a NULL value is a field with no value.

If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.

Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

How to Test for NULL Values?
It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
We will have to use the IS NULL and IS NOT NULL operators instead.

IS NULL Syntax:
--------------
SELECT column_names
FROM table_name
WHERE column_name IS NULL;

IS NOT NULL Syntax:
-------------------
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;

The IS NOT NULL Operator:
=========================
The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).

Example:
--------
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

The SQL UPDATE Statement:
========================
The UPDATE statement is used to modify the existing records in a table.

UPDATE Syntax:
-------------
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!

The SQL DELETE Statement:
============================
The DELETE statement is used to delete existing records in a table.

DELETE Syntax:
----------------
DELETE FROM table_name WHERE condition;

Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

Delete All Records:
------------------
It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

DELETE FROM table_name;


The SQL IN Operator:
=====================
->The IN operator allows you to specify multiple values in a WHERE clause.
->The IN operator is a shorthand for multiple OR conditions.

IN Syntax:
----------
1)SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);
          (or)
2)SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);

The SQL BETWEEN Operator:
========================
->The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
->The BETWEEN operator is inclusive: begin and end values are included. 

BETWEEN Syntax:
--------------
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

